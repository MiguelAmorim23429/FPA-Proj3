{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { getAuth, createUserWithEmailAndPassword } from 'firebase/auth';\n\nvar RegisterScreen = function RegisterScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var navigation = useNavigation();\n  var auth = getAuth();\n\n  var handleRegister = function handleRegister() {\n    createUserWithEmailAndPassword(auth, email, password).then(function (userCredentials) {\n      auth.currentUser = null;\n      Alert.alert('Conta criada com sucesso');\n    }).catch(function (error) {\n      return alert(error.message);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Image, {\n    style: styles.imageTeste,\n    source: require('C:/Users/Pedro/Documents/GitHub/FPA-Proj3/fpaApp/assets/fpa-logo.png')\n  }), React.createElement(View, null, React.createElement(TextInput, {\n    style: styles.textInput,\n    keyboardType: \"email-address\",\n    value: email,\n    onChangeText: function onChangeText(text) {\n      return setEmail(text);\n    },\n    placeholder: \"Email\"\n  }), React.createElement(TextInput, {\n    style: styles.textInput,\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    placeholder: \"Password\",\n    secureTextEntry: true\n  }), React.createElement(View, {\n    style: styles.redirectContainer\n  }, React.createElement(Text, {\n    style: styles.perguntaConta\n  }, \"J\\xE1 tens uma conta?\"), React.createElement(Text, {\n    style: styles.linkLogin,\n    onPress: function onPress() {\n      return navigation.navigate('Login');\n    }\n  }, \"Iniciar sess\\xE3o\")), React.createElement(Pressable, {\n    style: styles.btnPressable,\n    onPress: handleRegister\n  }, React.createElement(Text, {\n    style: styles.textPressable\n  }, \"Criar conta\"))), React.createElement(StatusBar, {\n    style: \"auto\"\n  }));\n};\n\nexport default RegisterScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  imageTeste: {\n    width: 176,\n    height: 120,\n    marginTop: 120\n  },\n  textInput: {\n    width: 300,\n    borderBottomWidth: 2,\n    borderColor: 'rgb(120, 120, 120)',\n    padding: 10,\n    marginTop: 25,\n    fontSize: 18\n  },\n  usernameLabel: {\n    marginTop: 30,\n    marginLeft: 5,\n    fontSize: 16\n  },\n  label: {\n    marginTop: 20,\n    fontSize: 16,\n    marginStart: 5\n  },\n  btnPressable: {\n    marginTop: 50,\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#5A79BA',\n    height: 40,\n    width: 150,\n    borderRadius: 5\n  },\n  textPressable: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  redirectContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    marginTop: 10,\n    maxHeight: 20\n  },\n  linkLogin: {\n    color: 'blue',\n    fontWeight: 'bold',\n    fontSize: 14,\n    marginLeft: 8\n  },\n  perguntaConta: {\n    color: 'rgb(120,120,120)',\n    fontSize: 13\n  }\n});","map":{"version":3,"sources":["C:/Users/Pedro/Documents/GitHub/FPA-Proj3/fpaApp/screens/RegisterScreen.js"],"names":["React","useState","useEffect","useNavigation","StatusBar","getAuth","createUserWithEmailAndPassword","RegisterScreen","email","setEmail","password","setPassword","navigation","auth","handleRegister","then","userCredentials","currentUser","Alert","alert","catch","error","message","styles","container","imageTeste","require","textInput","text","redirectContainer","perguntaConta","linkLogin","navigate","btnPressable","textPressable","StyleSheet","create","flex","alignItems","width","height","marginTop","borderBottomWidth","borderColor","padding","fontSize","usernameLabel","marginLeft","label","marginStart","alignSelf","justifyContent","backgroundColor","borderRadius","color","fontWeight","flexDirection","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, Image, View, TextInput, Alert, Pressable } from 'react-native'\r\nimport { getAuth, createUserWithEmailAndPassword} from 'firebase/auth'\r\n\r\nconst RegisterScreen = () => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const navigation = useNavigation()\r\n    const auth = getAuth()\r\n\r\n    const handleRegister = () => {\r\n        \r\n        createUserWithEmailAndPassword(auth, email, password)\r\n        .then(userCredentials => {\r\n          // const [user, setUser] = useState(userCredentials.user)\r\n          auth.currentUser = null\r\n          // setUser(null)\r\n          // console.log(user.email)\r\n          // userCredentials\r\n          // const user = userCredentials.user\r\n          // console.log(user.email)\r\n          Alert.alert('Conta criada com sucesso')\r\n        })\r\n        .catch(error => alert(error.message))\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n      \r\n            <Image\r\n            style={styles.imageTeste}\r\n            source={require('C:/Users/Pedro/Documents/GitHub/FPA-Proj3/fpaApp/assets/fpa-logo.png')}\r\n            />\r\n            <View>\r\n\r\n              {/* <Text style={styles.titleRegisto}>REGISTO</Text> */}\r\n              <TextInput style={styles.textInput} keyboardType='email-address' value={email} onChangeText={text => setEmail(text)} placeholder='Email'></TextInput>\r\n              <TextInput style={styles.textInput} value={password} onChangeText={text => setPassword(text)} placeholder='Password' secureTextEntry></TextInput>\r\n              {/* <TextInput style={[styles.textInput, styles.pwInput]} value={password} onChangeText={text => setPassword(text)} placeholder='Password' secureTextEntry></TextInput> */}\r\n              <View style={styles.redirectContainer}>\r\n                <Text style={styles.perguntaConta}>Já tens uma conta?</Text>\r\n                <Text style={styles.linkLogin} onPress={() => navigation.navigate('Login')}>Iniciar sessão</Text>\r\n              </View>\r\n              <Pressable\r\n                  style={styles.btnPressable}\r\n                  onPress={handleRegister}>\r\n                <Text style={styles.textPressable}>Criar conta</Text>\r\n              </Pressable>\r\n            </View>\r\n\r\n            <StatusBar style=\"auto\" />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    // backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    //justifyContent: 'center',\r\n  },\r\n  imageTeste: {\r\n    width: 176,\r\n    height: 120,\r\n    marginTop: 120,\r\n  },\r\n  textInput: {\r\n    width: 300,\r\n    //borderStyle: 'solid',\r\n    borderBottomWidth: 2,\r\n    // borderColor: '#000',\r\n    borderColor: 'rgb(120, 120, 120)',\r\n    padding: 10,\r\n    // marginBottom: 25,\r\n    marginTop: 25,\r\n    fontSize: 18,\r\n  },\r\n  usernameLabel: {\r\n    marginTop: 30,\r\n    marginLeft: 5,\r\n    fontSize: 16,\r\n  },\r\n  label: {\r\n    marginTop: 20,\r\n    fontSize: 16,\r\n    marginStart: 5,\r\n  },\r\n  btnPressable: {\r\n    marginTop: 50,\r\n    alignSelf: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#5A79BA',\r\n    height: 40,\r\n    width: 150,\r\n    borderRadius: 5,\r\n  },\r\n  textPressable: {\r\n    color: 'white',\r\n    fontSize: 18,\r\n    fontWeight: 'bold'\r\n  },\r\n  redirectContainer: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'baseline',\r\n    marginTop: 10,\r\n    maxHeight: 20\r\n  },\r\n  linkLogin: {\r\n    color: 'blue',\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    marginLeft: 8,\r\n  },\r\n  perguntaConta: {\r\n    color: 'rgb(120,120,120)',\r\n    fontSize: 13,\r\n  },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}