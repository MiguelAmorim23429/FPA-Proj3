{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { getDatabase, ref, onValue, query, equalTo, orderByChild } from \"firebase/database\";\nimport { Header } from 'react-native-elements';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport Icon from \"@expo/vector-icons/Ionicons\";\nimport MatchCard from \"./MatchCard\";\n\nvar CompetitionScreen = function CompetitionScreen(_ref) {\n  var route = _ref.route;\n  var idCompetition = route.params.idComp;\n  var navigation = useNavigation();\n  var db = getDatabase();\n  var matchesRef = query(ref(db, '/provas/'), orderByChild('competicao'), equalTo(idCompetition));\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      match = _useState2[0],\n      setMatch = _useState2[1];\n\n  useEffect(function () {\n    onValue(matchesRef, function (snapshot) {\n      var matchesArray = [];\n      snapshot.forEach(function (childSnapshot) {\n        var childKey = childSnapshot.key;\n        var childData = childSnapshot.val();\n        matchesArray.push([childKey, childData]);\n      });\n      setMatch(matchesArray);\n    }, {\n      onlyOnce: true\n    });\n  }, []);\n\n  var escolherProva = function escolherProva(val) {\n    console.log(val);\n    navigation.navigate('AthleticsTest', {\n      idProva: val\n    });\n  };\n\n  var goToPreviousScreen = function goToPreviousScreen() {\n    navigation.goBack();\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Header, {\n    statusBarProps: {\n      backgroundColor: 'transparent',\n      translucent: true\n    },\n    containerStyle: {\n      height: 80,\n      borderWidth: 0,\n      elevation: 4,\n      shadowColor: \"#000\"\n    },\n    backgroundColor: \"#1375BC\",\n    ViewComponent: LinearGradient,\n    linearGradientProps: {\n      colors: ['#1375BC', '#1794e8'],\n      start: {\n        x: 0.1,\n        y: 0.5\n      },\n      end: {\n        x: 1,\n        y: 0.5\n      }\n    },\n    leftComponent: React.createElement(View, {\n      style: styles.headerContainer\n    }, React.createElement(Icon, {\n      name: \"arrow-back\",\n      style: styles.headerIcon,\n      size: 24,\n      onPress: function onPress() {\n        return goToPreviousScreen();\n      }\n    }), React.createElement(Text, {\n      style: styles.headerTitle\n    }, \"Provas\"))\n  }), React.createElement(ScrollView, {\n    style: styles.listContainer\n  }, match.map(function (_ref2, index) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    var genders = {\n      \"Masculino\": React.createElement(Icon, {\n        name: \"male-sharp\",\n        size: 24,\n        color: \"#03A3FF\"\n      }),\n      \"Feminino\": React.createElement(Icon, {\n        name: \"female-sharp\",\n        size: 24,\n        color: \"#EC49A7\"\n      })\n    };\n    return React.createElement(View, {\n      key: key\n    }, React.createElement(MatchCard, {\n      cardIndex: index,\n      chaveId: key,\n      hora: value.hora,\n      categoria: value.categoria,\n      escalao: value.escalao,\n      genero: genders[value.genero],\n      onPress: function onPress() {\n        escolherProva(key);\n      }\n    }));\n  })));\n};\n\nexport default CompetitionScreen;\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%',\n    padding: 0,\n    margin: 0,\n    backgroundColor: 'white'\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    alignItems: 'baseline'\n  },\n  headerIcon: {\n    marginStart: 16,\n    color: 'white'\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    flexDirection: 'row',\n    alignSelf: 'baseline',\n    width: 130,\n    marginLeft: 16,\n    color: 'white'\n  },\n  listContainer: {\n    width: '100%'\n  }\n});","map":{"version":3,"sources":["C:/Users/Pedro/Documents/GitHub/FPA-Proj3/fpaApp/screens/CompetitionScreen.js"],"names":["React","useState","useEffect","useNavigation","getDatabase","ref","onValue","query","equalTo","orderByChild","Header","LinearGradient","Icon","MatchCard","CompetitionScreen","route","idCompetition","params","idComp","navigation","db","matchesRef","match","setMatch","snapshot","matchesArray","forEach","childSnapshot","childKey","key","childData","val","push","onlyOnce","escolherProva","console","log","navigate","idProva","goToPreviousScreen","goBack","styles","container","backgroundColor","translucent","height","borderWidth","elevation","shadowColor","colors","start","x","y","end","headerContainer","headerIcon","headerTitle","listContainer","map","index","value","genders","hora","categoria","escalao","genero","StyleSheet","create","width","padding","margin","flexDirection","alignItems","marginStart","color","fontSize","fontWeight","alignSelf","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { ScrollView,StyleSheet, View, Text } from 'react-native'\r\nimport { getDatabase, ref, onValue, query, equalTo, orderByChild } from \"firebase/database\"\r\nimport { Header } from 'react-native-elements'\r\n\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\nimport MatchCard from './MatchCard';\r\n\r\nconst CompetitionScreen = ({ route }) => {\r\n\r\n    // Variável com o valor do idCompeticao da competição em que se clicou no ecrã anterior\r\n    const idCompetition = route.params.idComp\r\n    const navigation = useNavigation()\r\n\r\n    // Referência ao sítio a que se vai buscar os dados na base de dados.\r\n    const db = getDatabase();\r\n    const matchesRef = query(ref(db, '/provas/'), orderByChild('competicao'), equalTo(idCompetition))\r\n\r\n    const [match, setMatch] = useState([])\r\n\r\n    useEffect(() => {\r\n        // Busca das provas existentes na competicao que selecionamos no ecrã anterior\r\n        onValue(matchesRef, (snapshot) => {\r\n            let matchesArray = []\r\n\r\n            snapshot.forEach((childSnapshot) => {\r\n                const childKey = childSnapshot.key;\r\n                const childData = childSnapshot.val();\r\n                matchesArray.push([childKey, childData])\r\n            });\r\n            setMatch(matchesArray)\r\n        }, {\r\n            onlyOnce: true\r\n        });\r\n    }, [])\r\n\r\n    // Clicar no Card e redirecionar para outro ecrã com a lista de provas dessa competição selecionada.\r\n    const escolherProva = (val) => {\r\n        console.log(val)\r\n        navigation.navigate('AthleticsTest', { idProva: val })\r\n    }\r\n\r\n    const goToPreviousScreen = () => {\r\n        navigation.goBack()\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n\r\n            <Header\r\n                statusBarProps={\r\n                    {\r\n                        backgroundColor: 'transparent',\r\n                        translucent: true,\r\n                    }\r\n                }\r\n                containerStyle={{ height: 80, borderWidth: 0, elevation: 4, shadowColor: \"#000\" }}\r\n                backgroundColor='#1375BC'\r\n                ViewComponent={LinearGradient} // Don't forget this!\r\n                linearGradientProps={{\r\n                    colors: ['#1375BC', '#1794e8'],\r\n                    start: { x: 0.1, y: 0.5 },\r\n                    end: { x: 1, y: 0.5 },\r\n                }}\r\n                leftComponent={\r\n                    <View style={styles.headerContainer}>\r\n                        <Icon name='arrow-back' style={styles.headerIcon} size={24} onPress={() => goToPreviousScreen()} />\r\n                        <Text style={styles.headerTitle}>Provas</Text>\r\n                    </View>\r\n                }\r\n            />\r\n\r\n            <ScrollView style={styles.listContainer}>\r\n                {match.map(([key, value], index) => {\r\n\r\n                    const genders = {\r\n                        \"Masculino\": <Icon name='male-sharp' size={24} color='#03A3FF' />,\r\n                        \"Feminino\": <Icon name='female-sharp' size={24} color='#EC49A7' />,\r\n                    }\r\n\r\n                    \r\n\r\n                    // if(value.ativa) {\r\n                    return (\r\n                        <View key={key}>\r\n                            <MatchCard\r\n                                cardIndex={index}\r\n                                chaveId={key}\r\n                                hora={value.hora}\r\n                                categoria={value.categoria}\r\n                                escalao={value.escalao}\r\n                                genero={genders[value.genero]}\r\n                                onPress={() => { escolherProva(key) }} />\r\n                        </View>\r\n                    )\r\n                    // }\r\n                })\r\n                }\r\n            </ScrollView>\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default CompetitionScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        padding: 0,\r\n        margin: 0,\r\n        backgroundColor: 'white',\r\n    },\r\n    headerContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'baseline'\r\n    },\r\n    headerIcon: {\r\n        marginStart: 16,\r\n        color: 'white',\r\n    },\r\n    headerTitle: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        flexDirection: 'row',\r\n        alignSelf: 'baseline',\r\n        width: 130,\r\n        marginLeft: 16,\r\n        color: 'white'\r\n    },\r\n    listContainer: {\r\n        width: '100%',\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}