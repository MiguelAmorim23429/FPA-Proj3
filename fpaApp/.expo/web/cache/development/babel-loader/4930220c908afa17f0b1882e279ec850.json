{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { Card, Header } from 'react-native-elements';\nimport { getAuth } from 'firebase/auth';\nimport { getDatabase, ref, onValue } from \"firebase/database\";\nimport { app } from \"../firebase\";\nimport moment from 'moment';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\n\nvar HomeScreen = function HomeScreen(props) {\n  var db = getDatabase();\n  var competitionsRef = ref(db, '/competicoes/');\n  var auth = getAuth();\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      competitions = _useState2[0],\n      setCompetitions = _useState2[1];\n\n  useEffect(function () {\n    var handler = function handler(snapshot) {\n      var competitionsArray = [];\n      snapshot.forEach(function (childSnapshot) {\n        var childKey = childSnapshot.key;\n        var childData = childSnapshot.val();\n        competitionsArray.push([childKey, childData]);\n      });\n      setCompetitions(competitionsArray);\n    };\n\n    var closeCompetionsOnvalue = onValue(competitionsRef, handler);\n    return function () {\n      closeCompetionsOnvalue();\n    };\n  }, []);\n\n  var handleLogout = function handleLogout() {\n    auth.signOut();\n  };\n\n  var escolherCompeticao = function escolherCompeticao(val) {\n    console.log(val);\n    navigation.navigate('Competition', {\n      idComp: val\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Header, {\n    statusBarProps: {\n      backgroundColor: 'transparent',\n      translucent: true\n    },\n    containerStyle: {\n      height: 80,\n      borderWidth: 0,\n      elevation: 4,\n      shadowColor: \"#000\"\n    },\n    backgroundColor: \"#1375BC\",\n    ViewComponent: LinearGradient,\n    linearGradientProps: {\n      colors: ['#1375BC', '#1794e8'],\n      start: {\n        x: 0.1,\n        y: 0.5\n      },\n      end: {\n        x: 1,\n        y: 0.5\n      }\n    },\n    leftComponent: {\n      text: 'Competições',\n      style: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        flexDirection: 'row',\n        alignSelf: 'baseline',\n        width: 130,\n        marginLeft: 16,\n        color: 'white'\n      }\n    },\n    rightComponent: React.createElement(Icon, {\n      name: \"logout\",\n      onPress: handleLogout,\n      style: styles.logOutPressable,\n      size: 24,\n      color: \"white\"\n    })\n  }), React.createElement(ScrollView, {\n    style: styles.cardContainer\n  }, competitions.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    if (value.ativa) {\n      return React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          alignSelf: 'center',\n          width: '100%',\n          height: 160,\n          padding: 0,\n          margin: 0,\n          borderRadius: 16\n        },\n        key: key\n      }, React.createElement(Card, {\n        containerStyle: styles.card\n      }, React.createElement(Pressable, {\n        onPress: function onPress() {\n          return escolherCompeticao(key);\n        }\n      }, React.createElement(Card.Image, {\n        style: styles.cardImage,\n        source: {\n          uri: value.foto\n        }\n      }), React.createElement(View, {\n        style: styles.cardInfo\n      }, React.createElement(Card.Title, {\n        style: styles.cardTitle\n      }, value.nome), React.createElement(View, {\n        style: styles.cardLabelContainer\n      }, React.createElement(Text, {\n        style: styles.cardLabel\n      }, moment(value.data).format('DD-MM-YYYY')), React.createElement(Text, {\n        style: styles.cardLabel\n      }, value.local))))));\n    }\n  })));\n};\n\nexport default HomeScreen;\nvar styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%',\n    padding: 0,\n    margin: 0,\n    backgroundColor: 'white'\n  },\n  cardContainer: {\n    width: '100%'\n  },\n  card: {\n    padding: 0,\n    margin: 0,\n    borderRadius: 16,\n    position: 'relative',\n    width: '90%',\n    alignSelf: 'center',\n    height: 140,\n    borderWidth: 0,\n    elevation: 4,\n    shadowColor: \"#000\"\n  },\n  cardImage: {\n    width: '100%',\n    height: '100%',\n    borderRadius: 16,\n    borderWidth: 0\n  },\n  cardInfo: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\n    borderRadius: 16\n  },\n  cardTitle: {\n    fontSize: 24,\n    color: 'white',\n    position: 'absolute',\n    top: 16,\n    left: 16\n  },\n  cardLabelContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'absolute',\n    top: 56,\n    left: 16\n  },\n  cardLabel: {\n    fontSize: 16,\n    color: 'white'\n  },\n  logOutPressable: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 24\n  },\n  screenTitle: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    width: 160,\n    paddingStart: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/Pedro/Documents/GitHub/FPA-Proj3/fpaApp/screens/HomeScreen.js"],"names":["React","useState","useEffect","useNavigation","Card","Header","getAuth","getDatabase","ref","onValue","app","moment","LinearGradient","Icon","HomeScreen","props","db","competitionsRef","auth","navigation","competitions","setCompetitions","handler","snapshot","competitionsArray","forEach","childSnapshot","childKey","key","childData","val","push","closeCompetionsOnvalue","handleLogout","signOut","escolherCompeticao","console","log","navigate","idComp","styles","container","backgroundColor","translucent","height","borderWidth","elevation","shadowColor","colors","start","x","y","end","text","style","fontSize","fontWeight","flexDirection","alignSelf","width","marginLeft","color","logOutPressable","cardContainer","map","value","ativa","justifyContent","padding","margin","borderRadius","card","cardImage","uri","foto","cardInfo","cardTitle","nome","cardLabelContainer","cardLabel","data","format","local","StyleSheet","create","position","top","left","display","alignItems","paddingHorizontal","screenTitle","paddingStart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { StyleSheet, Text, View, ScrollView, Pressable } from 'react-native'\r\nimport { Card, Header } from 'react-native-elements'\r\nimport { getAuth } from 'firebase/auth'\r\nimport { getDatabase, ref, onValue } from \"firebase/database\";\r\nimport { app } from '../firebase';\r\nimport moment from 'moment';\r\n\r\nimport { LinearGradient } from 'expo-linear-gradient'\r\n\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\nconst HomeScreen = (props) => {\r\n\r\n  const db = getDatabase()\r\n  const competitionsRef = ref(db, '/competicoes/')\r\n\r\n  const auth = getAuth()\r\n  const navigation = useNavigation()\r\n\r\n  const [competitions, setCompetitions] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n    const handler = (snapshot) => {\r\n\r\n      let competitionsArray = []\r\n\r\n      snapshot.forEach((childSnapshot) => {\r\n        const childKey = childSnapshot.key;\r\n        const childData = childSnapshot.val();\r\n        competitionsArray.push([childKey, childData])\r\n      });\r\n      setCompetitions(competitionsArray)\r\n    }\r\n\r\n    const closeCompetionsOnvalue = onValue(competitionsRef, handler)\r\n    return (() => {\r\n      closeCompetionsOnvalue()\r\n    })\r\n    // onValue(competicoesRef, (snapshot) => {\r\n    //   let comps = []\r\n\r\n    //   snapshot.forEach((childSnapshot) => {\r\n    //     const childKey = childSnapshot.key;\r\n    //     const childData = childSnapshot.val();\r\n    //     const arrayEntries = Object.entries(childData)\r\n\r\n    //     comps.push([childKey, childData])\r\n    //   });\r\n    //   setCompeticoes(comps)\r\n    //   // console.log(competicoes)\r\n    // }, {\r\n    //   onlyOnce: true\r\n    // });\r\n  }, [])\r\n\r\n  const handleLogout = () => {\r\n    auth\r\n      .signOut()\r\n  }\r\n\r\n  // Clicar no Card e redirecionar para outro ecrã com a lista de provas dessa competição selecionada.\r\n  const escolherCompeticao = (val) => {\r\n    console.log(val)\r\n    navigation.navigate('Competition', { idComp: val })\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\r\n      <Header\r\n        statusBarProps={\r\n          {\r\n            backgroundColor: 'transparent',\r\n            translucent: true,\r\n          }\r\n        }\r\n        containerStyle={{ height: 80, borderWidth: 0, elevation: 4, shadowColor: \"#000\"}}\r\n        backgroundColor='#1375BC'\r\n        ViewComponent={LinearGradient}\r\n        linearGradientProps={{\r\n          colors: ['#1375BC', '#1794e8'],\r\n          start: { x: 0.1, y: 0.5 },\r\n          end: { x: 1, y: 0.5 },\r\n        }}\r\n        leftComponent={{ text: 'Competições', style: { fontSize: 20, fontWeight: 'bold', flexDirection: 'row', alignSelf: 'baseline', width: 130, marginLeft: 16, color: 'white' } }}\r\n        rightComponent={<Icon name='logout' onPress={handleLogout} style={styles.logOutPressable} size={24} color='white' />}\r\n      />\r\n\r\n      <ScrollView style={styles.cardContainer}>\r\n        {competitions.map(([key, value]) => {\r\n          if (value.ativa) {\r\n            return (\r\n              // <View style={{ justifyContent: 'center', alignSelf: 'center', width: '100%', height: 200, padding: 0, margin: 0, borderRadius: 16 }} key={key}>\r\n              <View style={{ justifyContent: 'center', alignSelf: 'center', width: '100%', height: 160, padding: 0, margin: 0, borderRadius: 16 }} key={key}>\r\n\r\n                <Card containerStyle={styles.card}>\r\n                  <Pressable onPress={() => escolherCompeticao(key)}>\r\n                    <Card.Image style={styles.cardImage} source={{ uri: value.foto }}></Card.Image>\r\n\r\n                    <View style={styles.cardInfo}>\r\n\r\n                      <Card.Title style={styles.cardTitle}>{value.nome}</Card.Title>\r\n\r\n                      <View style={styles.cardLabelContainer}>\r\n                        <Text style={styles.cardLabel}>{moment(value.data).format('DD-MM-YYYY')}</Text>\r\n                        <Text style={styles.cardLabel}>{value.local}</Text>\r\n                      </View>\r\n\r\n                    </View>\r\n                  </Pressable>\r\n                </Card>\r\n\r\n              </View>\r\n            )\r\n          }\r\n        })}\r\n\r\n      </ScrollView>\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    padding: 0,\r\n    margin: 0,\r\n    backgroundColor: 'white',\r\n  },\r\n  cardContainer: {\r\n    width: '100%',\r\n  },\r\n  card: {\r\n    padding: 0,\r\n    margin: 0,\r\n    borderRadius: 16,\r\n    position: 'relative',\r\n    width: '90%',\r\n    alignSelf: 'center',\r\n    height: 140,\r\n    // height: 180,\r\n    borderWidth: 0,\r\n    elevation: 4,\r\n    shadowColor: \"#000\",\r\n  },\r\n  cardImage: {\r\n    width: '100%',\r\n    height: '100%',\r\n    borderRadius: 16,\r\n    borderWidth: 0,\r\n  },\r\n  cardInfo: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    height: '100%',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.4)',\r\n    borderRadius: 16,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 24,\r\n    color: 'white',\r\n    position: 'absolute',\r\n    top: 16,\r\n    left: 16,\r\n  },\r\n  cardLabelContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    position: 'absolute',\r\n    top: 56,\r\n    left: 16,\r\n  },\r\n  cardLabel: {\r\n    fontSize: 16,\r\n    color: 'white',\r\n  },\r\n  logOutPressable: {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    paddingHorizontal: 24,\r\n  },\r\n  screenTitle: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    width: 160,\r\n    paddingStart: 16,\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}